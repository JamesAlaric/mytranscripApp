'use client';

import React, { useState, useEffect } from 'react';
import { ArrowUpTrayIcon, DocumentTextIcon, DocumentDuplicateIcon } from '@heroicons/react/24/outline';
import ThemeToggle from '../components/ThemeToggle';
import FileUploader from '../components/FileUploader';
import TranscriptionViewer from '../components/TranscriptionViewer';
import SummaryViewer from '../components/SummaryViewer';
import ProgressBar from '../components/ProgressBar';
import { generateSummary } from './services/summarizer';

// Define worker type
let whisperWorker: Worker | null = null;

export default function Home() {
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [transcription, setTranscription] = useState('');
  const [summary, setSummary] = useState('');
  const [fileName, setFileName] = useState('');
  const [statusMessage, setStatusMessage] = useState('');

  // Initialize the worker
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Initialize worker only in client-side
      if (!whisperWorker && window.Worker) {
        try {
          whisperWorker = new Worker(new URL('./workers/whisperWorker.ts', import.meta.url));
          
          whisperWorker.onmessage = async (event) => {
            const { status, message, progress, transcription } = event.data;
            
            setStatusMessage(message || '');
            
            if (status === 'progress' && progress) {
              setProgress(progress);
            }
            
            if (status === 'complete' && transcription) {
              setTranscription(transcription);
              setProgress(100);
              setStatusMessage('Generating summary...');
              
              // Generate summary from transcription
              const generatedSummary = await generateSummary(transcription);
              setSummary(generatedSummary);
              setIsProcessing(false);
            }
            
            if (status === 'error') {
              console.error('Worker error:', message);
              alert(`Error: ${message}`);
              setIsProcessing(false);
            }
          };
          
          whisperWorker.onerror = (error) => {
            console.error('Worker error:', error);
            alert('An error occurred with the transcription worker.');
            setIsProcessing(false);
          };
        } catch (error) {
          console.error('Failed to initialize worker:', error);
          // Fall back to mock implementation if worker fails
        }
      }
    }
    
    // Clean up worker on component unmount
    return () => {
      if (whisperWorker) {
        whisperWorker.terminate();
        whisperWorker = null;
      }
    };
  }, []);

  const handleFileUpload = async (file: File) => {
    if (!file) return;
    
    setFileName(file.name);
    setIsProcessing(true);
    setProgress(0);
    setTranscription('');
    setSummary('');
    setStatusMessage('Preparing audio file...');
    
    try {
      if (whisperWorker) {
        // Use the worker for transcription
        const arrayBuffer = await file.arrayBuffer();
        whisperWorker.postMessage({
          type: 'transcribe',
          audioData: arrayBuffer
        });
      } else {
        // Fallback to mock implementation if worker is not available
        await mockProcessAudio(file);
      }
    } catch (error) {
      console.error('Error processing file:', error);
      alert('An error occurred while processing the file. Please try again.');
      setIsProcessing(false);
    }
  };

  // Mock implementation for development/testing
  const mockProcessAudio = async (file: File) => {
    setStatusMessage('Processing audio (mock mode)...');
    
    const totalSteps = 100;
    let currentStep = 0;
    
    const interval = setInterval(() => {
      currentStep += 1;
      setProgress(currentStep);
      
      if (currentStep >= totalSteps) {
        clearInterval(interval);
        
        // Mock transcription for testing
        const mockTranscription = 
          'This is a sample transcription of a meeting. In a real implementation, this would be generated by Whisper.js.\n\n' +
          'Speaker 1: Hello everyone, thank you for joining today\'s meeting.\n\n' +
          'Speaker 2: Thanks for having us. I\'m excited to discuss the new project.\n\n' +
          'Speaker 1: Let\'s start by reviewing our progress from last week.\n\n' +
          'Speaker 3: I\'ve completed the initial design phase as planned.\n\n' +
          'Speaker 2: Great work! I think we should move forward with implementation next week.';
        
        setTranscription(mockTranscription);
        setStatusMessage('Generating summary...');
        
        // Generate summary with a slight delay to simulate processing
        setTimeout(async () => {
          const generatedSummary = await generateSummary(mockTranscription);
          setSummary(generatedSummary);
          setIsProcessing(false);
        }, 1500);
      }
    }, 50);
  };

  const exportToTxt = (content: string, filePrefix: string) => {
    const element = document.createElement('a');
    const file = new Blob([content], {type: 'text/plain'});
    element.href = URL.createObjectURL(file);
    element.download = `${filePrefix}_${fileName.split('.')[0]}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };
  
  // Function to export as PDF (using browser's print functionality)
  const exportToPdf = (content: string, filePrefix: string) => {
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      alert('Please allow pop-ups to export as PDF');
      return;
    }
    
    printWindow.document.write(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>${filePrefix} - ${fileName}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; }
          h1 { color: #333; }
          pre { white-space: pre-wrap; font-family: inherit; }
        </style>
      </head>
      <body>
        <h1>${filePrefix} - ${fileName}</h1>
        <pre>${content}</pre>
        <script>
          window.onload = function() { window.print(); }
        </script>
      </body>
      </html>
    `);
    
    printWindow.document.close();
  };

  return (
    <main className="flex min-h-screen flex-col p-4 md:p-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-2xl md:text-3xl font-bold">Meeting Transcriber</h1>
        <ThemeToggle />
      </div>

      {!transcription && (
        <div className="flex-1 flex flex-col items-center justify-center">
          <FileUploader onFileUpload={handleFileUpload} isProcessing={isProcessing} />
          
          {isProcessing && (
            <div className="w-full max-w-md mt-8">
              <ProgressBar progress={progress} />
              <p className="text-center mt-2">{statusMessage} {progress}%</p>
            </div>
          )}
        </div>
      )}

      {transcription && (
        <div className="flex-1 flex flex-col">
          <div className="flex flex-wrap gap-4 mb-6">
            <button
              onClick={() => exportToTxt(transcription, 'transcription')}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              <DocumentTextIcon className="h-5 w-5" />
              Export Transcription (TXT)
            </button>
            <button
              onClick={() => exportToPdf(transcription, 'Transcription')}
              className="flex items-center gap-2 px-4 py-2 bg-blue-700 text-white rounded-md hover:bg-blue-800 transition-colors"
            >
              <DocumentTextIcon className="h-5 w-5" />
              Export Transcription (PDF)
            </button>
            <button
              onClick={() => exportToTxt(summary, 'summary')}
              className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
            >
              <DocumentDuplicateIcon className="h-5 w-5" />
              Export Summary (TXT)
            </button>
            <button
              onClick={() => exportToPdf(summary, 'Summary')}
              className="flex items-center gap-2 px-4 py-2 bg-green-700 text-white rounded-md hover:bg-green-800 transition-colors"
            >
              <DocumentDuplicateIcon className="h-5 w-5" />
              Export Summary (PDF)
            </button>
            <button
              onClick={() => {
                setTranscription('');
                setSummary('');
                setFileName('');
              }}
              className="flex items-center gap-2 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors"
            >
              <ArrowUpTrayIcon className="h-5 w-5" />
              Upload New File
            </button>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <TranscriptionViewer transcription={transcription} />
            <SummaryViewer summary={summary} />
          </div>
        </div>
      )}
    </main>
  );
}
